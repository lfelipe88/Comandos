
# 🧠 Principios SOLID en C# (.NET Core) - Explicado con Ejemplos Comparativos

Los principios **SOLID** son cinco buenas prácticas que todo desarrollador orientado a objetos debería aplicar. Ayudan a crear código **más limpio**, **fácil de mantener** y **escalable**.

Este README te mostrará qué son, cómo aplicarlos con ejemplos **antes y después** de aplicar cada principio. ¡Todo con estilo claro y amigable! 🎉

---

## 🟡 S - Single Responsibility Principle (SRP)
📌 *"Una clase debe tener una sola razón para cambiar."*  
Cada clase debe encargarse de **una sola cosa**.

### ❌ Sin aplicar SRP:
```csharp
// Esta clase tiene dos responsabilidades: generar e imprimir un reporte
class Report {
    public string Title { get; set; }
    public string Content { get; set; }

    public void Generate() {
        // Generar contenido del reporte
    }

    public void Print() {
        // Imprimir el reporte
    }
}
```

### ✅ Aplicando SRP:
```csharp
class Report {
    public string Title { get; set; }
    public string Content { get; set; }

    public void Generate() {
        // Solo genera el contenido
    }
}

class ReportPrinter {
    public void Print(Report report) {
        // Solo imprime el reporte
    }
}
```
🎯 **Ventaja:** Si cambia la lógica de impresión, solo modificamos `ReportPrinter`, no `Report`.

---

## 🔵 O - Open/Closed Principle (OCP)
📌 *"El código debe estar abierto para extensión, pero cerrado para modificación."*

### ❌ Sin aplicar OCP:
```csharp
// Cada vez que se agrega una nueva forma, hay que modificar esta clase
class AreaCalculator {
    public double TotalArea(object[] shapes) {
        double area = 0;
        foreach (var shape in shapes) {
            if (shape is Circle c)
                area += Math.PI * c.Radius * c.Radius;
            else if (shape is Square s)
                area += s.Side * s.Side;
        }
        return area;
    }
}
```

### ✅ Aplicando OCP:
```csharp
abstract class Shape {
    public abstract double Area();
}

class Circle : Shape {
    public double Radius { get; set; }
    public override double Area() => Math.PI * Radius * Radius;
}

class Square : Shape {
    public double Side { get; set; }
    public override double Area() => Side * Side;
}

class AreaCalculator {
    public double TotalArea(Shape[] shapes) {
        return shapes.Sum(s => s.Area());
    }
}
```
🎯 **Ventaja:** Podemos agregar nuevas formas sin modificar `AreaCalculator`.

---

## 🔴 L - Liskov Substitution Principle (LSP)
📌 *"Las subclases deben poder sustituir a sus clases base sin alterar el comportamiento del programa."*

### ❌ Sin aplicar LSP:
```csharp
// Penguin no puede volar, pero estamos obligando a que lo haga
class Bird {
    public virtual void Fly() => Console.WriteLine("Flying...");
}

class Penguin : Bird {
    public override void Fly() => throw new NotImplementedException();
}
```

### ✅ Aplicando LSP:
```csharp
interface IBird { }

interface IFlyingBird : IBird {
    void Fly();
}

class Sparrow : IFlyingBird {
    public void Fly() => Console.WriteLine("Sparrow flying...");
}

class Penguin : IBird {
    // No vuela, pero cumple con el contrato
}
```
🎯 **Ventaja:** Respetamos los contratos sin generar excepciones innecesarias.

---

## 🟣 I - Interface Segregation Principle (ISP)
📌 *"Los clientes no deben verse forzados a depender de interfaces que no utilizan."*

### ❌ Sin aplicar ISP:
```csharp
interface IMachine {
    void Print();
    void Scan();
    void Fax();
}

class OldPrinter : IMachine {
    public void Print() { }
    public void Scan() => throw new NotImplementedException();
    public void Fax() => throw new NotImplementedException();
}
```

### ✅ Aplicando ISP:
```csharp
interface IPrinter {
    void Print();
}

interface IScanner {
    void Scan();
}

class SimplePrinter : IPrinter {
    public void Print() => Console.WriteLine("Printing...");
}
```
🎯 **Ventaja:** Cada clase implementa solo lo que realmente necesita.

---

## 🟢 D - Dependency Inversion Principle (DIP)
📌 *"Depende de abstracciones, no de implementaciones concretas."*

### ❌ Sin aplicar DIP:
```csharp
class EmailSender {
    public void Send(string message) => Console.WriteLine("Email: " + message);
}

class NotificationService {
    private EmailSender _sender = new EmailSender();

    public void Notify(string msg) => _sender.Send(msg);
}
```

### ✅ Aplicando DIP:
```csharp
interface IMessageSender {
    void Send(string message);
}

class EmailSender : IMessageSender {
    public void Send(string message) => Console.WriteLine("Email: " + message);
}

class NotificationService {
    private readonly IMessageSender _sender;

    public NotificationService(IMessageSender sender) {
        _sender = sender;
    }

    public void Notify(string msg) => _sender.Send(msg);
}
```
🎯 **Ventaja:** Podemos usar diferentes tipos de mensajes (Email, SMS, Push) sin modificar `NotificationService`.

---

## 🏁 Conclusión

Aplicar **SOLID** no se trata de seguir reglas estrictas, sino de **escribir mejor código**. Te ayuda a:

- ✨ Mantenerlo limpio y comprensible
- 🧪 Facilitar pruebas unitarias
- ⚙️ Escalar sin miedo
- 🤝 Trabajar mejor en equipo

¡Empieza a aplicarlos desde hoy y verás la diferencia! 🚀💡
